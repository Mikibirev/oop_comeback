#include <iostream>
#include <fstream>		// Добавление библиотеки ввода/вывода из файлов
#include <QMainWindow>
#include <fstream>

using namespace std;		// Использовать стандартное пространство имён std
using arr = QVector<int>;        // Упрощение vector<int> до arr с помощью using-объявления

namespace kib {									// Использовать собственное пространство имён kib

	void random_vec(arr& a, int l, int r) {		// Процедура заполнения вектора случайными значениями
		for (int i = 0; i < l; i++)				// В конец вектора a добавлять...
			a.push_back(rand() % (r + 1));		// l случайных чисел в диапазоне от 0 до r
    }
	
	int sum(const arr& a) {						// Функция суммирования l элементов вектора a
		int s = a[0];							// Начальному значению сумматора присваиваем первый элемент вектора 
		for (int i = 1; i < a.size(); i++)		// Затем от следующего до последнего, равного размеру вектора, элементы...
			s += a[i];							// ...прибавляем к сумматору
		return s;								// Возвращаем получившийся результат суммирования
	}

    void output_file(const arr& a) {				// Процедура вывода вектора a в файл f
        ofstream f_out("data.dat", ios::binary);					// Создание объекта класса ofstream
		for (unsigned i = 0; i < a.size(); i++)			// Каждый элемент вектора до последнего, равного размеру вектора....
			f_out.write((char*)&a[i], sizeof(int));		// ...записываем в файл в шеснадцатеричной форме(?), размером типа int
		f_out.close();									// Закрыть файл после записи
	}

    void input_file(arr& a) {			// Процедура записи данных из файла f в вектор a
        a.clear();
        ifstream f_in("data.dat", ios::binary);			// Создание объекта класса ifstream
		f_in.seekg(0, ios::end);				// Перемещение указателя в конец файла
		streamoff f_size = f_in.tellg();		// Присвоить переменной f_size типа streamoff значение размера файла
		f_in.seekg(0);							// Возвращение указателя на начало файла
		int n;									// Объявление переменной-буфера для записи элементов

        for (streamoff i = 0; i < f_size / sizeof(int); i++) {
			// f_size / sizeof(int) - это метод определения размера вектора внутри файла
			// Размер файла делится на размер типа int, однако для корректной работы...
			// ...необходимо заранее знать, какой тип данных нужно считывать из файла

			f_in.read((char*)&n, sizeof(int));			// Считываем значения из файла и записываем в буфер n
			a.push_back(n);								// Добавляем знаение буфера n в конец вектора a
		}
		f_in.close();		// Закрыть файл
	}
}
