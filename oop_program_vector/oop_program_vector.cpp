#include <iostream>
#include <vector>				// Подключение библиотеки векторов
#include <time.h>				// Подключение псевдослучайности, определяемой текущим временем
#include "header_vector.h"		// Подключение собственного модуля

int main() {
	using namespace std;			// Использовать стандартное пространство имён std
	using namespace kib;			// Использовать собственное пространство имён kib
	setlocale(0, "");				// Использовать русскую локализацию в консоли
	srand(unsigned(time(0)));		// Включить псевдослучайность, связав srand() с текущим временем

	vector<int> array;		// Объявление вектора array из элементов типа int	
	int lnt, rng;			// Объявление переменных для длины массива и диапазона значений
							// lnt(от англ. length - длина)
							// rng(от англ. range - диапазон)

	try {					// Обработка исключений, длина и диапазон...
							// ...не должны быть меньше нуля, иначе выбрасывается...
							// ...исключение, которое обрабатывается в catch...
							// ...через вывод сообщения об ошибке и прерывание программы

		cout << "Длина массива: ";							// Обращение к пользователю
		cin >> lnt;											// Ввод длины вектора
		if (lnt <= 0)										// Если длина не положительна
			throw exception("Длина не положительна");		// Выбрасывание ошибки типа exeption со строкой

		cout << "Диапазон значений: ";						// Обращение к пользователю
		cin >> rng;											// Ввод диапазона значений
		if (rng <= 0)										// Если диапазон не положителен
			throw exception("Диапазон не положителен");		// Выбрасывание ошибки типа exeption со строкой
	}
	catch (const std::exception& ex) {					// Обработка исключения ex(от англ. exception - исключение)
		cout << "Ошибка: " << ex.what() << endl;		// Ошибка: Длина не положительна || Диапазон не положителен
		system("pause");								// Зафиксировать консоль
		return 0;										// Завершить программу
	}
	// Если пользователь ввёл положительные значения, то...
	// ...программа продолжает работать, иначе выводится сообщение об ошибке

	random_vec(array, lnt, rng);	// Процедура заполнения вектора array длины lnt случайными числами в диапазоне rng
	output_screen(array);			// Процедура вывода элементов вектора array на экран через пробел

	cout << "Сумма элементов: " << sum(array) << endl;			// Вывод на экран результата выполнения...
																// ...функции, суммирующей все элементы вектора array

	const string f_name = "data.dat";	// Преобразую название файла в переменную для процедур
	output_file(array, f_name);			// Процедура вывода вектора array в файл f_name
	array.clear();						// Очистка вектора как от значений, так и из памяти
	input_file(array, f_name);			// Процедура вывода вектора array из файла f_name
	output_screen(array);				// Процедура вывода элементов вектора array на экран через пробел

	system("pause");	// Зафиксировать консоль
	return 0;			// Завершить программу
}
// Создать программу с массивом, используя класс вектора
// Кибирев Михаил Геннадьевич ВМК-20-1